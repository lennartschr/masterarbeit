"""
Django settings for prototyp project.

Generated by 'django-admin startproject' using Django 4.2.1.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""

from pathlib import Path
import os
import django_heroku
import dj_database_url

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get(
    "SECRET_KEY", "your-secret-key"
)  # Ensure to keep this key secure in production

# Umgebungsvariable für Entwicklungs- oder Produktionsumgebung
ENVIRONMENT = os.environ.get("ENV", "development")

# Debugging basierend auf der Umgebung
if ENVIRONMENT == "production":
    DEBUG = os.environ.get("DEBUG", "False") == "True"
else:
    DEBUG = True

# Allowed Hosts
ALLOWED_HOSTS = [
    "0.0.0.0",
    "localhost",
    "127.0.0.1",
    "unigoe-prototyp.herokuapp.com",
    "vitanova-b36831ccb453.herokuapp.com"
]

# Application definition
INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "webapp",  # Ensure this is your app
]

MIDDLEWARE = [
    "django.middleware.security.SecurityMiddleware",
    "whitenoise.middleware.WhiteNoiseMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    # Benutzerdefinierte Middleware für abgelaufene Sessions
    "webapp.middleware.SessionExpiryMiddleware",
]

ROOT_URLCONF = "prototyp.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [os.path.join(BASE_DIR, "templates")],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "prototyp.wsgi.application"

# Database ONLINE
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.sqlite3",
        "NAME": BASE_DIR / "db.sqlite3",
    }
}

# In Produktionsumgebungen verwenden wir PostgreSQL
if "DATABASE_URL" in os.environ:
    DATABASES["default"] = dj_database_url.config(conn_max_age=600, ssl_require=True)


# Database LOKAL
# Use SQLite in development and PostgreSQL in production
# if ENVIRONMENT == "production":
#     DATABASES = {"default": dj_database_url.config(conn_max_age=600, ssl_require=True)}
# else:
#     DATABASES = {
#         "default": {
#             "ENGINE": "django.db.backends.sqlite3",
#             "NAME": BASE_DIR / "db.sqlite3",
#         }
#     }


# Password validation
AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

# Internationalization
LANGUAGE_CODE = "de-de"
TIME_ZONE = "Europe/Berlin"
USE_I18N = True
USE_L10N = True
USE_TZ = True

# Static files (CSS, JavaScript, Images)
STATIC_URL = "/static/"
STATIC_ROOT = os.path.join(BASE_DIR, "staticfiles")
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "webapp/static"),
]

# WhiteNoise configuration for serving static files
if ENVIRONMENT == "production":
    STATICFILES_STORAGE = "whitenoise.storage.CompressedManifestStaticFilesStorage"
else:
    STATICFILES_STORAGE = "django.contrib.staticfiles.storage.StaticFilesStorage"

# Session management

# Sicherstellen, dass die Django-Standard-Session-Engine verwendet wird
SESSION_ENGINE = "django.contrib.sessions.backends.db"  # Verwende die DB-Session-Engine
# Sicherstellen, dass Session- und CSRF-Cookies sicher sind, wenn in Produktion
SESSION_COOKIE_SECURE = ENVIRONMENT == "production"
CSRF_COOKIE_SECURE = ENVIRONMENT == "production"
# Session Timeout konfigurieren (60 Minuten)
SESSION_COOKIE_AGE = 3600  # 60 Minuten in Sekunden
SESSION_EXPIRE_AT_BROWSER_CLOSE = True  # Session endet bei Schließen des Browsers
SESSION_COOKIE_HTTPONLY = True  # Cookies sind nicht durch JavaScript zugänglich
SESSION_SAVE_EVERY_REQUEST = True  # Aktualisiert die Sitzung bei jedem Request

# Django-Heroku settings
if ENVIRONMENT == "production":
    django_heroku.settings(locals())

# Default primary key field type
DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"
